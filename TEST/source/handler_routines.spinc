!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! Module : HANDLER_ROUTINES.SPINC
! System : SheerPower 4GL Web Interface
! Author : Dan Swain & Daniel Esbensen
! Company: TTI
! Date   : November 7, 2011
! Purpose: Common routines used by handlers
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! i n i t _ h a n d l e r
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    Initialize handler data and structures
!
! Expected on entry:
!    handler_name$  = name of this handler
!    PRIVATE is_inited? = true  if we have already initialized things
!
! Locals used:
!    
!
! Results on exit:
!    cgi_ch = cgi i/o channel and the cgi i/o channel is open
!    handler generalized variables and structures are set up
!    PRIVATE is_inited? = true
!    cookie_id_name$        = name of the cookie element with the ID
!    cookie_ipaddr_name$    = name of the cookie element with the IPaddress
!    cookie_date_time_name$ = name of the cookie element with the DATE_TIME
!    cookie_hash_name$      = name of the cookie element with the HASH
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine init_handler: private is_inited?

  if is_inited? then exit routine
  is_inited? = true
  
  if handler_name$ = '' then
    print '?? handler_name$ must contain a value'
    delay
    stop
  end if
  
  session_timeout     = 60*60 * 24 * 14 ! timeout a session after a few days
  script_name$        = 'scripts/spiis.dll'
  ask system: program this_program$
  here$ = fileinfo$(this_program$, 'location')
  
  data_folder$        = filespec$('@..\data\')
  ars_loc$            = filespec$('sheerpower:ars\')
  
  caution_url$ = '<img src="/images/caution.png" alt="Caution or Error" border=0 width="40%" height="40%">'
  
  cookie_id_name$        = handler_name$ + '-ID='
  cookie_ipaddr_name$    = handler_name$ + '-IPADDR='
  cookie_date_time_name$ = handler_name$ + '-DATE_TIME='
  cookie_hash_name$      = handler_name$ + '-HASH='
  
  
  open table session          : name '@..\data\session',    access outin, default read
  open table cgi_content_type : name '@..\data\cgi_content_type'
  
  open table daemon_work : name '@..\data\daemon_work', access outin, default read
  open table user_login  : name '@..\data\user_login',  access outin, default read
  open table error_audit : name '@..\data\error_audit', access outin
  open table user_audit  : name '@..\data\user_audit',  access outin
  open table genlink     : name '@..\data\genlink', access outin
  
  
  
  // Figure out which page is for logging in
  
  open file cgi_ch: name 'cgi://' + handler_name$, access outin
  
  open file log_ch: name 'textwindow://Handler log', access output
  
  
end routine



!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! c h e c k _ l o g i n
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!   Check to see if the user has already logged in.
!   If so, return his session id.
!   Otherwise, give him the login screen
!
! Expected on entry:
!>	cgi_ch             = Channel to the browser
!>	cookie$            = cookie passed in
!>	cookie_session_id$ = user id from the cookie
!
!
! Locals used:
!
!
! Results on exit:
!>	session_id$        = session id assigned to this user/session
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine check_login

  session_id$ = ''
  write_cgi_initial_header
  print #cgi_ch: ''
  do
    if  cookie$ = ''  then exit do

    validate_cookie
    if  _error  then exit do
          
    set structure session, field session_id : key cookie_session_id$
    if  _extracted = 0  then exit do
    if  session(status) <> 'LOGIN'  then exit do

    check_timeout
    if  _error  then  exit do
          
    session(last_activity_date_time) = fulltime$
    session_id$ = cookie_session_id$
    
    exit routine
          ! we got a good session, so exit
          ! we're already logged in
  end do
  
  //print 'Login check failed'

  display_login_webpage
end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! v a l i d a t e _ c o o k i e
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    to get this far, the user must have a valid session cookie 
!    for this system.  Check it out...
!
! Expected on entry:
!>   cookie$ will have the session cookie
!
! Locals used:
!
!
! Results on exit:
!>   cookie is validated 
!>   _error = true if there is a problem
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine validate_cookie
  parse_cookie

  validate_cookie_contents
  if  _error  then  exit routine
end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! p a r s e _ c o o k i e 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    parse the individual elements from the cookie
!
! Expected on entry:
!>	cookie$                 = cookie passed in
!>  cookie_id_name$        = name of the cookie element with the ID
!>  cookie_ipaddr_name$    = name of the cookie element with the IPaddress
!>  cookie_date_time_name$ = name of the cookie element with the DATE_TIME
!>  cookie_hash_name$      = name of the cookie element with the HASH
!
!
! Locals used:
!
!
! Results on exit:
!>	cookie_session_id$ = Session ID from the cookie
!>	cookie_ip$         = Client ip from the cookie 
!>	cookie_date_time$  = Date and time stored in the cookie 
!>	cookie_hash$       = hash value from the cookie
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine parse_cookie
  z0$                = element$(cookie$, 2, cookie_id_name$)
  cookie_session_id$ = element$(z0$, 1, ';')

  z0$                = element$(cookie$, 2, cookie_ipaddr_name$)
  cookie_ip$         = element$(z0$, 1, ';')

  z0$                = element$(cookie$, 2, cookie_date_time_name$)
  cookie_date_time$  = replace$(element$(z0$, 1, ';'), '%20= ')

  z0$                = element$(cookie$, 2, cookie_hash_name$)
  cookie_hash$       = element$(z0$, 1, ';')
end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! v a l i d a t e _ c o o k i e _ c o n t e n t s 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    validate the pieces of the cookie
!    hash the contents and make sure it matches the hash value
!    passed in the cookie
!
! Expected on entry:
!
!>	cookie_session_id$ = user id from the cookie
!>	cookie_ip$         = host ip address from the cookie
!>	cookie_date_time$  = current date and time stamp
!>	cookie_hash$       = hash value from the cookie
!>	cookie$            = cookie passed in 
!
! Locals used:
!
!>	hsh%       = hash value calculated 
!>	log_msg$   = message to be logged 
!
! Results on exit:
!
!>	_error = true if there is a problem
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine validate_cookie_contents


//** enable this if IP address must match **
//  z$ = cookie_session_id$ +
//       cookie_ip$         +
//       cookie_date_time$
 
  z$ = cookie_session_id$ +
       cookie_date_time$

  z1$ = hash$(z$, '1828702384')

  z2$ = encode$(convert(z1$[1:4]), 16) +
        encode$(convert(z1$[5:8]), 16)

  if  (cookie_hash$ <> z2$)  then
    set error on
    exit routine
  end if
end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! c h e c k _ t i m e o u t 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    Check to see if the timeout period has passed since the
!    last activity
!
! Expected on entry:
!>	session_timeout  = idle time allowed
!
!
! Locals used:
!>	interval_seconds = seconds since last activity 
!
!
! Results on exit:
!>  _error = true if there is a problem
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine check_timeout
  if  session_timeout = 0  then  exit routine
          ! no timeout.  session never expires

  if  not valid(session(last_activity_date_time), 'required; fulltime')  then
    exit routine
  end if
              
  interval_seconds = seconds(session(last_activity_date_time))

  if  (seconds(fulltime$) - interval_seconds) > session_timeout  then
    set error on
    exit routine
  end if
end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! d i s p l a y _ l o g i n _ f o r m 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    The user wasn't logged in, so give them the login webpage
!
! Expected on entry:
!  last_query$ = the last query that they did, so we can restore it
!
! Locals used:
!
! Results on exit:
!
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine display_login_webpage

  output_webpage with webpage 'login'

end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! h a n d l e _ l o g i n 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    The login screen has been submitted.  See if the inwebpageation
!    is valid.  If so, log them in (assign cookie and session id)
!    Otherwise give them an error message and give them the login
!    screen again
!
! Expected on entry:
!>	cgi_ch       = Channel to the browser
!>	login_name$   = username/login entered 
!>	password$    = password entered 
!>	error$       = error message to user 
!>	webpage = name of the webpage 
!
!
! Locals used:
!
!
! Results on exit:
!  user is logged in or error generated
!  cookies stored if login was successful
!  session id generated if login was successful
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine handle_login
  
  get_env_variables
  ask #cgi_ch, symbol 'login_name' : value login_name$
  ask #cgi_ch, symbol 'password'  : value password$

  login_name$ = trim$(ucase$(change$(login_name$, ' ', '')))
  password$  = trim$(ucase$(change$(password$,  '# ', '')))

  write_cgi_initial_header
    
  do
    
    if  login_name$ = ''  or password$  = ''  then  exit do

    set structure user_login, field login_name: key login_name$
    if  _extracted = 0  then  exit do
    if  user_login(status) <> 'ACTIVE'  then  exit do

    // if already an encoded password to compare with, then encode what
    // the user entered as their password
    if  user_login(password)[1:1] = '#' then
       z1$ = hash$(password$, '1230259486')
       password$ = '#' + encode$(convert(z1$[1:4]), 36) +
                         encode$(convert(z1$[5:8]), 36)
       password$ = left(password$, 15)
    end if
    
    if  password$ <> user_login(password)  then  exit do

    // Sinced they had a successful login to an unhashed password,
    // now we hash the password for safe keeping!

    if user_login(password)[1:1] <> '#' then // not hashed yet
       z1$ = hash$(password$, '1230259486')
       password$ = '#' + encode$(convert(z1$[1:4]), 36) +
                          encode$(convert(z1$[5:8]), 36)
       password$ = left(password$, 15)
       user_login(password) = password$  // now we match and are all hashed safely
    end if

    !>>>
    
    store_session_record
    store_session_cookie //  this finished the header as well
    

    user_login(last_login_datetime) = edit$(fulltime$, 2)
    user_login(login_counter) = user_login(login_counter) + 1    
        
    exit routine
          ! we got logged in OK        
  end do

  !>> login didn't work

  print #cgi_ch: // finish header

  if  login_name$ <> ""  then  error$ = "Incorrect Login"
  
  output_webpage with webpage 'login'
  set error on
end routine




!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! g e t _ e n v _ v a r i a b l e s 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    Get the enviromental variables from the browser
!
! Expected on entry:
!>	cgi_ch        = Channel to the browser 
!
!
! Locals used:
!
!
! Results on exit:
!>	query_string$ = Any query string supplied
!>	path_info$    = Path from the request
!>	client_ip$    = ip address of the client machine
!>	cookie$       = Any cookies stored so far 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine get_env_variables

  ask #cgi_ch, symbol 'env:QUERY_STRING'    : value query_string$
  ask #cgi_ch, symbol 'env:PATH_INFO'       : value path_info$
  ask #cgi_ch, symbol 'env:REMOTE_ADDR'     : value client_ip$
  ask #cgi_ch, symbol 'env:HTTP_COOKIE'     : value cookie$
  ask #cgi_ch, symbol 'env:HTTP_USER_AGENT' : value user_agent$

end routine





!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! s t o r e _ s e s s i o n _ r e c o r d 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    The login was valid so create a session record for this user
!
! Expected on entry:
!>	session_date$ = today's date
!>	session_id$   = session id assigned to this user/session
!
!
! Locals used:
!
!
! Results on exit:
!   session record added
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine store_session_record
  if  session_date$ <> date$  then
    session_date$ = date$
    session_nbr   = 10000000
  end if

  session_nbr++

  session_id$ = session_date$ + str$(session_nbr)

  when exception in
    add structure session
      session(session_id) = session_id$
    end add
  use
  end when
  if  _error  then
    session_nbr = session_nbr + 1000
    repeat routine
  end if

  session(user_gid)                = user_login(user_gid)
  session(login_date_time)         = fulltime$
  session(last_action)             = 'LOGIN'
  session(ip_address)              = client_ip$
  session(last_activity_date_time) = fulltime$
  session(status)                  = 'LOGIN'
end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! s t o r e _ s e s s i o n _ c o o k i e 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    store a  session cookie that contains the session id for
!    this user
!
! Expected on entry:
!>	session_id$ = session id assigned to this user/session
!>	client_ip$  = ip address of the client machine
!>	cgi_ch      = Channel to the browser
!
!
! Locals used:
!
!
! Results on exit:
!   cookies have been stored
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine store_session_cookie

  date_time$ = fulltime$

//  z$ = session_id$ +
//       client_ip$         +
//       date_time$

  z$ = session_id$ +
       date_time$

  z1$ = hash$(z$, '1230259486')

  hash$ = encode$(convert(z1$[1:4]), 16) +
          encode$(convert(z1$[5:8]), 16)

  !>>>
  
  write_cgi_initial_header

  print #cgi_ch: "Set-Cookie: " +
                 cookie_id_name$ + trim$(session_id$) + ";"   +
                 "path= /;"

  print #cgi_ch: "Set-Cookie: " +
                  cookie_ipaddr_name$ + client_ip$ + ";"   +
                  "path= /;"

  print #cgi_ch: "Set-Cookie: " +
                 cookie_date_time_name$ + replace$(date_time$, ' =%20') + ";"   +
                 "path= /;"

  print #cgi_ch: "Set-Cookie: " +
                 cookie_hash_name$ + hash$ + ";"   +
                 "path= /;"

  print #cgi_ch:
  print #cgi_ch:  // end with a blank line per the http spec
end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! w r i t e _ c g i _ i n i t i a l _ h e a d e r 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    Write the initial cgi header.  Note, that you have to still write out a
!    single blank line after calling this routine.
!    We don't write it here because there might be cookies still!
!
! Expected on entry:
!    none
!
! Locals used:
!    
!
! Results on exit:
!    
!  header is written out
!  cgi_header_written?  = true
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine write_cgi_initial_header
  if cgi_header_written? then  exit routine  // just write it once
  //*****  Set no-caching so browsers that support it will not cache ****
  //*****  our data.
  z$ = 'Pragma: no-cache'
  print #cgi_ch : "HTTP/1.1 200 OK" + chr$(13) + chr$(10) + z$
  write_cgi_content_type
  
  cgi_header_written? = true
end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! w r i t e _ c g i _ c o n t e n t _ t y p e 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    The content type needs to be different for different types
!    of output.  We will base the content type on the path info
!    by checking for a file type in the path.
!
! Expected on entry:
!>	filetype$     = type of file (extension) 
!>	process$      = process value from path or process field 
!>	path_info$    = Path from the request
!>	content_type$ = type of content
!>	cgi_ch        = Channel to the browser
!
!
! Locals used:
!
!
! Results on exit:
!   content type line has been written
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine write_cgi_content_type
  filetype$ = ''
  do
    filetype$ = lcase$(element$(process$, 2, '.'))
    if  filetype$ <> '' then exit do
    z0 = elements(path_info$, '.')
    if z0 > 1 then filetype$ = lcase$(element$(path_info$, z0, '.'))
  end do
  content_type$ = 'text/html'
  do
    if  filetype$ = '' then exit do
    set structure cgi_content_type, field filetype : key filetype$
    if  _extracted = 0 then exit do
    content_type$ = cgi_content_type(content_type)
  end do
  print #cgi_ch: 'Content-type: '; content_type$
end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! o u t p u t _ w e b p a g e 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    
!
! Expected on entry:
!    webpage = full file spec of the webpage to be output
!
! Locals used:
!    
!
! Results on exit:
!    We output to the cgi channel while doing substitutions
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine output_webpage with webpage
 
  if not cgi_header_written? then
   write_cgi_initial_header
   print #cgi_ch:
  end if
   
  webpage =  change$(webpage, '.:', '') // no tricky webpage names are allowed
  webpage_filename$ = here$ + '..\template\html\' + webpage + '.html'
  process_webpage_template
  
end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! p r o c e s s _ w e b p a g e _ t e m p l a t e 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    process the template file, substituting any substitution tokens
!
! Expected on entry:
!>	cgi_ch        = cgi channel to write to
!>  webpage_filename$ = full file spec of the webpage
!
! Locals used:
!>	eof?          = true if we reached the end of the webpage file
!
! Results on exit:
!>  webpage template has been written to the client browser
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine process_webpage_template
  
  when exception in
    open file main_ch: name  webpage_filename$
  use
  end when
  if _error then
    error$ = extext$ + ' for ' + webpage_filename$
    z0$ = here$ + '..\template\html\login.html'
    if webpage_filename$ = z0$ then
      print '?? '; error$
      delay
    end if
    webpage_filename$ = z0$
    repeat routine
  end if
    
  do
    line input #main_ch, eof eof? : rec$
    if  eof?  then  exit do
    trimmed_rec$ = trim$(rec$)
    if trimmed_rec$[1:1] = '!' or trimmed_rec$[1:2] = '//' then repeat do
    do_substitutions 
    print #cgi_ch: rec$
  loop
  close #main_ch
  
end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! D O  S U B S T I T U T I O N S
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!   look for substitution tokens (<<...>>)
!   if found, then break it up into its pieces and call the
!   find_subvalue routine to handle substituting the real
!   data into it
!
! Expected on entry:
!>	rec$           = text line from the template file 
!
! Locals used:
!>	leftpos        = position of the << 
!>	rightpos       = position of the >> 
!>	subvalue$      = result of find_subvalue
!
! Results on exit:
!>	subsymbol$     = symbol (contents of the <<>>)
!>	subsymbol_arg$ = argument of replacement text (contains field name)
!>	extras$        = 3rd element of token with more data in it 
!>	optional_name$ = optional field name in a token 
!>	javascript$    = any javascript in the token 
!>	rules$         = any rule to be executed (ask_code) 
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!routine do_substitutions with record, returning new_record, private leftpos,rightpos, rec$
routine do_substitutions 
  leftpos = 1
  do
    leftpos = pos(rec$, "[[", leftpos)
    if leftpos = 0 then exit do
    rightpos = pos(rec$, "]]", leftpos+2)
    if rightpos = 0 then exit do
    z0$            = rec$[leftpos+2:rightpos-1]
    subsymbol$     = lcase$(element$(z0$, 1, ' '))
    subsymbol_arg$ = element$(z0$, 2, ' ')
    extras$        = element$(z0$, 3, ' ')
    subsymbol_arg1$  = ucase$(element$(extras$, 1, '|'))
    subsymbol_arg2$ = ucase$(element$(extras$, 2, '|'))
    optional_name_uncased$  = element$(extras$, 1, '|')
    optional_name$  = ucase$(optional_name_uncased$)
    tabindex$       = element$(extras$, 2, '|')
    if  tabindex$ <> '' then tabindex$ = ' tabindex=' + quote$(unquote$(tabindex$))
    javascript$     = element$(extras$, 3, '|')
    subsymbol_opts$ = ucase$(element$(extras$, 4, '|'))
    rules$          = ucase$(element$(extras$, 5, '|'))
    find_subvalue  // this routine should be in the calling handler
    rec$[leftpos:rightpos+1] = subvalue$
    leftpos = leftpos + len(subvalue$)
  loop
end routine





!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! h a n d l e _ e r r o r 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!
!    Handle error messages back to a webpage.
!
! Expected on entry:
!>  error$  = error message if any
!
! Locals used:
!    
!
! Results on exit:
!>  subvalue$ = error html
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine handle_error
  if error$ = '' then exit routine

  subvalue$ = '<table bgcolor="lightyellow" border=1 cellpadding=5><tr>'

//  if caution_url$ <>'' then
//    subvalue$ = subvalue$ + '<td>' + caution_url$ + '</td>'
//  end if
  
  subvalue$ = subvalue$ +
              '<td>' +
              '<font size="+1" color="red"><b>' + 
              '<font size="+3">Error: &nbsp;</font>' +
              error$ + 
              '</b></font></table><p>'
              
  // The JavaScript needs the CRLF stuff on the front for new lines!
  z0$ = replace$(error$, '<br>=,<p>=')
  subvalue$ = subvalue$ +
              chr$(13)+chr$(10) + '<SCRIPT language="JavaScript"> ' +
              chr$(13)+chr$(10) + '<!-- hide from old browsers ' +
              chr$(13)+chr$(10) + 'alert(' + quote$('ERROR: ' + z0$) + ');' +
              chr$(13)+chr$(10) + '//-->'  +
              chr$(13)+chr$(10) + '</SCRIPT>'

  error$ = ''
end routine


!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
! l o g _ i t 
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
! Brief description:
!    print a message to the log file
!
! Expected on entry:
!
!>	log_ch   = channel number for the log file
!>	log_msg$ = message to be logged
!
! Locals used:
!
! Results on exit:
!   message is written to the log file
!
!%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
routine log_it
  print #log_ch: fulltime$(seconds(fulltime$), 3); ' '; log_msg$
end routine